/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package xpa.shadow.tracker;

import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.net.InetAddress;
import javax.swing.*;
import javax.swing.text.DefaultFormatterFactory;

/**
 * @author ShadowXPA
 */
public class OptionsForm extends javax.swing.JFrame {

    private JFrame owner;
    final private TempInfo TI;

    /**
     * Creates new form OptionsForm
     *
     * @param Owner
     * @param TI
     */
    public OptionsForm(JFrame Owner, final TempInfo TI) {
        initComponents();
        this.owner = Owner;
        this.TI = TI;
        ftfIP.setValue(TI.getServerIP());
        ftfPort.setValue(TI.getServerPort());
        ftfRT.setValue(this.TI.getRefreshTime());
        cbLP.setSelected(this.TI.isLogPlayers());
        cbAN.setSelected(this.TI.isAllowNotifications());
        cbANM.setSelected(this.TI.isAdvancedNotificationMode());
        cbAMN.setSelected(this.TI.isAllowMultipleNotifications());
        cbBPOSM.setSelected(this.TI.isBodyParkedOnServerMode());
        ftfSNNT.setValue(this.TI.getMinutes());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Op_Panel = new mJPanel();
        Op_Label = new javax.swing.JLabel();
        gTracker = new javax.swing.JPanel();
        lRT = new javax.swing.JLabel();
        ftfRT = new javax.swing.JFormattedTextField();
        cbLP = new javax.swing.JCheckBox();
        gNotifications = new javax.swing.JPanel();
        cbAN = new javax.swing.JCheckBox();
        cbANM = new javax.swing.JCheckBox();
        cbAMN = new javax.swing.JCheckBox();
        cbBPOSM = new javax.swing.JCheckBox();
        lSNNT = new javax.swing.JLabel();
        ftfSNNT = new javax.swing.JFormattedTextField();
        btnApply = new javax.swing.JButton();

        lIP = new JLabel();
        lPort = new JLabel();
        ftfIP = new JFormattedTextField();
        ftfPort = new JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(Constants.APP_JOIN_NAME + Constants.OPTIONS);
        setAutoRequestFocus(false);
        setIconImage(Toolkit.getDefaultToolkit().getImage(TrackerForm.class.getClassLoader().getResource("ejo.gif")));
        setLocation(new java.awt.Point(0, 0));
        setName(Constants.OPTIONS); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }

            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Op_Label.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        Op_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Op_Label.setText(Constants.OPTIONS);

        gTracker.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Tracker", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        gTracker.setOpaque(false);

        lIP.setText("Server IP");
        lIP.setToolTipText("<html>Server IP</html>");

        ftfIP.setToolTipText("<html>Server IP</html>");

        lPort.setText("Server Port");
        lPort.setToolTipText("<html>Server Port</html>");

        ftfPort.setFormatterFactory(new DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#"))));
        ftfPort.setToolTipText("<html>Server Port</html>");

        lRT.setText("Refresh Time");
        lRT.setToolTipText("<html>Minimum: 30000<br>Time, in milliseconds, which the tracker waits before updating the information</html>");

        ftfRT.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        ftfRT.setToolTipText("<html>Minimum: 30000<br>Time, in milliseconds, which the tracker waits before updating the information</html>");

        cbLP.setText("Log Players");
        cbLP.setToolTipText("Logs Players Information Into a Log File");
        cbLP.setOpaque(false);

        javax.swing.GroupLayout gTrackerLayout = new javax.swing.GroupLayout(gTracker);
        gTracker.setLayout(gTrackerLayout);
        gTrackerLayout.setHorizontalGroup(
                gTrackerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(gTrackerLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(gTrackerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cbLP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(gTrackerLayout.createSequentialGroup()
                                                .addComponent(lRT)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ftfRT))
                                        .addGroup(gTrackerLayout.createSequentialGroup()
                                                .addComponent(lPort)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ftfPort))
                                        .addGroup(gTrackerLayout.createSequentialGroup()
                                                .addComponent(lIP)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ftfIP)))
                                .addContainerGap())
        );
        gTrackerLayout.setVerticalGroup(
                gTrackerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(gTrackerLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(gTrackerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lIP)
                                        .addComponent(ftfIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(gTrackerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lPort)
                                        .addComponent(ftfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(gTrackerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lRT)
                                        .addComponent(ftfRT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbLP)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gNotifications.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Notifications", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        gNotifications.setOpaque(false);
        gNotifications.setPreferredSize(new java.awt.Dimension(410, 161));

        cbAN.setText("Allow Notifications");
        cbAN.setToolTipText("Allows the tracker to send desktop notifications");
        cbAN.setEnabled(SystemTray.isSupported());
        cbAN.setOpaque(false);

        cbANM.setText("Advanced Notification Mode");
        cbANM.setToolTipText("Allows the tracker to send notifications when a player leaves or joins");
        cbANM.setEnabled(SystemTray.isSupported());
        cbANM.setOpaque(false);

        cbAMN.setText("Allow Multiple Notifications");
        cbAMN.setToolTipText("<html>Checked: More than one notification will show on your desktop<br>\nUnchecked: The tracker will refresh the old notification</html>");
        cbAMN.setEnabled(SystemTray.isSupported());
        cbAMN.setOpaque(false);

        cbBPOSM.setText("Body Parked on Server Mode");
        cbBPOSM.setToolTipText("<html>Checked: Tracker will notify if 2 or more players are online<br>\nUnchecked: Tracker will notify if 1 or more players are online</html>");
        cbBPOSM.setOpaque(false);

        lSNNT.setText("Send New Notification Cooldown");
        lSNNT.setToolTipText("<html>Minimum: 30<br>Time, in minutes, which the tracker waits before sending a new notification</html>");

        ftfSNNT.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        ftfSNNT.setToolTipText("<html>Minimum: 30<br>Time, in minutes, which the tracker waits before sending a new notification</html>");

        javax.swing.GroupLayout gNotificationsLayout = new javax.swing.GroupLayout(gNotifications);
        gNotifications.setLayout(gNotificationsLayout);
        gNotificationsLayout.setHorizontalGroup(
                gNotificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(gNotificationsLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(gNotificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cbBPOSM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cbANM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cbAN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cbAMN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(gNotificationsLayout.createSequentialGroup()
                                                .addComponent(lSNNT)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ftfSNNT)))
                                .addContainerGap())
        );
        gNotificationsLayout.setVerticalGroup(
                gNotificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(gNotificationsLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(cbAN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbANM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbAMN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbBPOSM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(gNotificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lSNNT)
                                        .addComponent(ftfSNNT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(21, Short.MAX_VALUE))
        );

        btnApply.setText("Apply");
        btnApply.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Op_PanelLayout = new javax.swing.GroupLayout(Op_Panel);
        Op_Panel.setLayout(Op_PanelLayout);
        Op_PanelLayout.setHorizontalGroup(
                Op_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Op_PanelLayout.createSequentialGroup()
                                .addGroup(Op_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(Op_PanelLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(Op_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(gTracker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(Op_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(gNotifications, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)))
                                        .addGroup(Op_PanelLayout.createSequentialGroup()
                                                .addGap(180, 180, 180)
                                                .addComponent(btnApply)))
                                .addContainerGap())
        );
        Op_PanelLayout.setVerticalGroup(
                Op_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Op_PanelLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(Op_Label)
                                .addGap(18, 18, 18)
                                .addComponent(gTracker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(gNotifications, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnApply)
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Op_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Op_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OwnerEnable(boolean enable) {
        owner.setFocusable(enable);
        owner.setEnabled(enable);
    }

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        Long i;
        String prevIP = TI.getServerIP();
        int prevPort = TI.getServerPort();
        String newIP;
        int newPort;

        try {
            ftfIP.commitEdit();
            newIP = (String) ftfIP.getValue();
            InetAddress.getByName(newIP);
            this.TI.setServerIP(newIP);
        } catch (Exception ignored) {
            newIP = prevIP;
            JOptionPane.showMessageDialog(this, ignored.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        try {
            ftfPort.commitEdit();
            newPort = ((Long) ftfPort.getValue()).intValue();
            this.TI.setServerPort(newPort);
        } catch (Exception ignored) {
            newPort = prevPort;
            JOptionPane.showMessageDialog(this, ignored.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        try {
            ftfRT.commitEdit();
            if ((i = (Long) ftfRT.getValue()) >= Constants.REFRESH_TIME) {
                this.TI.setRefreshTime(i.intValue());
            }
        } catch (Exception ignored) {
            JOptionPane.showMessageDialog(this, ignored.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        this.TI.setLogPlayers(cbLP.isSelected());
        this.TI.setAllowNotifications(cbAN.isSelected());
        this.TI.setAdvancedNotificationMode(cbANM.isSelected());
        this.TI.setAllowMultipleNotifications(cbAMN.isSelected());
        this.TI.setBodyParkedOnServerMode(cbBPOSM.isSelected());
        try {
            ftfSNNT.commitEdit();
            if ((i = (Long) ftfSNNT.getValue()) >= Constants.MIN_MINUTES) {
                this.TI.setMinutes(i.intValue());
            }
        } catch (Exception ignored) {
            JOptionPane.showMessageDialog(this, ignored.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));

        if (!prevIP.equals(newIP) || prevPort != newPort) {
            synchronized (this.TI) {
                this.TI.notifyAll();
            }
        }
    }//GEN-LAST:event_btnApplyActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        OwnerEnable(false);
        requestFocus();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        OwnerEnable(true);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(OptionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(OptionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(OptionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(OptionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new OptionsForm(null, null).setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Op_Label;
    private mJPanel Op_Panel;
    private javax.swing.JButton btnApply;
    private javax.swing.JCheckBox cbAMN;
    private javax.swing.JCheckBox cbAN;
    private javax.swing.JCheckBox cbANM;
    private javax.swing.JCheckBox cbBPOSM;
    private javax.swing.JCheckBox cbLP;
    private javax.swing.JFormattedTextField ftfRT;
    private javax.swing.JFormattedTextField ftfSNNT;
    private javax.swing.JPanel gNotifications;
    private javax.swing.JPanel gTracker;
    private javax.swing.JLabel lRT;
    private javax.swing.JLabel lSNNT;

    private javax.swing.JLabel lIP;
    private javax.swing.JFormattedTextField ftfIP;
    private javax.swing.JLabel lPort;
    private javax.swing.JFormattedTextField ftfPort;
    // End of variables declaration//GEN-END:variables
}
