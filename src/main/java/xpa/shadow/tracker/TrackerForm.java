/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package xpa.shadow.tracker;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import xpa.shadow.Main;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.net.*;
import java.time.Instant;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author ShadowXPA
 */
public class TrackerForm extends javax.swing.JFrame {

    private DatagramSocket Socket;
    private DatagramPacket SendStatusPacket;
    private DatagramPacket ReceiveDataPacket;
    private byte[] RequestStatus;
    private byte[] ReceiveData;
    private final TempInfo TI;
    private final ServerInfo SI;
    private final TrayIcon Tray;
    private int cont = 0;
    private static volatile boolean KeepThread;
    private static volatile boolean Bother = true;
    private static volatile int NumPlayers = 0;
    private JLabel MarqueeMessage;

    private static final Object LockLog = new Object();                         // Lock to synchronize file reading/writting
    private static final Object LockTI = new Object();

    /**
     * Creates new form TrackerForm
     *
     * @param Tray
     * @throws java.net.UnknownHostException
     * @throws java.net.SocketException
     */
    public TrackerForm(TrayIcon Tray) throws UnknownHostException, SocketException, Exception {
        this.Tray = Tray;
        TI = new TempInfo();
        SI = new ServerInfo(TI);
        KeepThread = true;
        initComponents();
        Init();
        MarqueeMessage = new JLabel();
        MarqueeMessage.setText(TI.getTrackerMessage());
        marqueePanel1.setOpaque(false);
        marqueePanel1.add(MarqueeMessage);
        marqueePanel1.setScrollWhenFocused(false);
        marqueePanel1.startScrolling();
        Panel_PLs.setOpaque(false);
        Panel_PLs.getViewport().setOpaque(false);
        mJPanel mp = new mJPanel();
        mp.setSize(Constants.EJO_IMG_WIDTH, Constants.EJO_IMG_HEIGHT);
        mp.setLocation((this.getWidth() - mp.getWidth()) / 2, (this.getHeight() - mp.getHeight()) / 2);
        mp.setOpaque(false);
        this.getContentPane().add(mp);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mJPanel1 = new mJPanel();
        Panel_SI = new javax.swing.JPanel();
        Server_ = new javax.swing.JLabel();
        ServerN = new javax.swing.JLabel();
        IP_PortT = new javax.swing.JLabel();
        PanelFlag = new javax.swing.JPanel();
        FlagPic = new javax.swing.JLabel();
        CountryT = new javax.swing.JLabel();
        marqueePanel1 = new MarqueePanel();
        Panel_PI = new javax.swing.JPanel();
        Players_ = new javax.swing.JLabel();
        PlayersT = new javax.swing.JLabel();
        Bots_ = new javax.swing.JLabel();
        BotsT = new javax.swing.JLabel();
        Total_ = new javax.swing.JLabel();
        TotalT = new javax.swing.JLabel();
        Panel_PLs = new javax.swing.JScrollPane();
        Panel_PLsInterior = new javax.swing.JPanel();
        PlayerI = new javax.swing.JLabel();
        PlayerSc = new javax.swing.JLabel();
        PlayerPi = new javax.swing.JLabel();
        Panel_GI = new javax.swing.JPanel();
        PanelGI_MP = new javax.swing.JPanel();
        MapPic = new javax.swing.JLabel();
        PanelGI_MI = new javax.swing.JPanel();
        Map_ = new javax.swing.JLabel();
        MapT = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        Gametype_ = new javax.swing.JLabel();
        GametypeT = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        Fraglimit_ = new javax.swing.JLabel();
        FraglimitT = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        Timelimit_ = new javax.swing.JLabel();
        TimelimitT = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        Gamename_ = new javax.swing.JLabel();
        GamenameT = new javax.swing.JLabel();
        MainMenu = new javax.swing.JMenuBar();
        OptionsMenu = new javax.swing.JMenu();
        AboutMenu = new javax.swing.JMenu();

        javax.swing.GroupLayout mJPanel1Layout = new javax.swing.GroupLayout(mJPanel1);
        mJPanel1.setLayout(mJPanel1Layout);
        mJPanel1Layout.setHorizontalGroup(
                mJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );
        mJPanel1Layout.setVerticalGroup(
                mJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(Constants.APP_NAME_VERSION);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(Toolkit.getDefaultToolkit().getImage(TrackerForm.class.getClassLoader().getResource("ejo.gif")));
        setLocation(new java.awt.Point(0, 0));
        setName(Constants.APP_NAME); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(430, 710));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }

            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Panel_SI.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Server Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        Panel_SI.setMaximumSize(new java.awt.Dimension(396, 32767));
        Panel_SI.setMinimumSize(new java.awt.Dimension(396, 99));
        Panel_SI.setOpaque(false);

        Server_.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Server_.setLabelFor(ServerN);
        Server_.setText("Server Name:");

        ServerN.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ServerN.setText(Constants.SERVER_NAME);

        IP_PortT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        PanelFlag.setMaximumSize(new java.awt.Dimension(40, 20));
        PanelFlag.setMinimumSize(new java.awt.Dimension(40, 20));
        PanelFlag.setPreferredSize(new java.awt.Dimension(40, 20));

        FlagPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ejo.gif"))); // NOI18N
        FlagPic.setMaximumSize(new java.awt.Dimension(40, 20));
        FlagPic.setMinimumSize(new java.awt.Dimension(40, 20));
        FlagPic.setPreferredSize(new java.awt.Dimension(40, 20));

        javax.swing.GroupLayout PanelFlagLayout = new javax.swing.GroupLayout(PanelFlag);
        PanelFlag.setLayout(PanelFlagLayout);
        PanelFlagLayout.setHorizontalGroup(
                PanelFlagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(FlagPic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        PanelFlagLayout.setVerticalGroup(
                PanelFlagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(FlagPic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        CountryT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        marqueePanel1.setPreferredWidth(380);
        marqueePanel1.setScrollAmount(1);
        marqueePanel1.setScrollFrequency(22);
        marqueePanel1.setLayout(new javax.swing.BoxLayout(marqueePanel1, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout Panel_SILayout = new javax.swing.GroupLayout(Panel_SI);
        Panel_SI.setLayout(Panel_SILayout);
        Panel_SILayout.setHorizontalGroup(
                Panel_SILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Panel_SILayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(Panel_SILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(marqueePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(IP_PortT, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_SILayout.createSequentialGroup()
                                                .addComponent(Server_, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ServerN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(Panel_SILayout.createSequentialGroup()
                                                .addComponent(PanelFlag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(CountryT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        Panel_SILayout.setVerticalGroup(
                Panel_SILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_SILayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(Panel_SILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Server_)
                                        .addComponent(ServerN))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(IP_PortT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(Panel_SILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(PanelFlag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(CountryT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(marqueePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15))
        );

        Panel_PI.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Player Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        Panel_PI.setMaximumSize(new java.awt.Dimension(396, 32767));
        Panel_PI.setMinimumSize(new java.awt.Dimension(396, 100));
        Panel_PI.setOpaque(false);
        Panel_PI.setPreferredSize(new java.awt.Dimension(396, 99));

        Players_.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Players_.setLabelFor(PlayersT);
        Players_.setText("Players:");

        PlayersT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        PlayersT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        PlayersT.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        Bots_.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Bots_.setLabelFor(BotsT);
        Bots_.setText("Bots:");

        BotsT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        BotsT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        Total_.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Total_.setLabelFor(TotalT);
        Total_.setText("Total:");

        TotalT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        TotalT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout Panel_PILayout = new javax.swing.GroupLayout(Panel_PI);
        Panel_PI.setLayout(Panel_PILayout);
        Panel_PILayout.setHorizontalGroup(
                Panel_PILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Panel_PILayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(Panel_PILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(Total_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Bots_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Players_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(Panel_PILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(PlayersT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(BotsT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(TotalT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        Panel_PILayout.setVerticalGroup(
                Panel_PILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Panel_PILayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(Panel_PILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Players_)
                                        .addComponent(PlayersT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(Panel_PILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Bots_)
                                        .addComponent(BotsT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                                .addGroup(Panel_PILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Total_)
                                        .addComponent(TotalT))
                                .addContainerGap())
        );

        Panel_PLs.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Online Players", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        Panel_PLs.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        Panel_PLs.setMaximumSize(new java.awt.Dimension(396, 150));
        Panel_PLs.setMinimumSize(new java.awt.Dimension(396, 150));
        Panel_PLs.setPreferredSize(new java.awt.Dimension(396, 150));

        Panel_PLsInterior.setOpaque(false);

        PlayerI.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        PlayerSc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        PlayerPi.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        PlayerPi.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout Panel_PLsInteriorLayout = new javax.swing.GroupLayout(Panel_PLsInterior);
        Panel_PLsInterior.setLayout(Panel_PLsInteriorLayout);
        Panel_PLsInteriorLayout.setHorizontalGroup(
                Panel_PLsInteriorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_PLsInteriorLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(PlayerI, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PlayerSc, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PlayerPi, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23))
        );
        Panel_PLsInteriorLayout.setVerticalGroup(
                Panel_PLsInteriorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Panel_PLsInteriorLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(Panel_PLsInteriorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(PlayerPi, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Panel_PLsInteriorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(PlayerI, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(PlayerSc, javax.swing.GroupLayout.Alignment.TRAILING)))
                                .addContainerGap())
        );

        Panel_PLs.setViewportView(Panel_PLsInterior);

        Panel_GI.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Game Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        Panel_GI.setMaximumSize(new java.awt.Dimension(396, 227));
        Panel_GI.setMinimumSize(new java.awt.Dimension(396, 227));
        Panel_GI.setOpaque(false);
        Panel_GI.setPreferredSize(new java.awt.Dimension(396, 227));

        PanelGI_MP.setMaximumSize(new java.awt.Dimension(180, 180));
        PanelGI_MP.setMinimumSize(new java.awt.Dimension(180, 180));
        PanelGI_MP.setOpaque(false);

        MapPic.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MapPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ejo.gif"))); // NOI18N
        MapPic.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        MapPic.setMaximumSize(new java.awt.Dimension(180, 180));
        MapPic.setMinimumSize(new java.awt.Dimension(180, 180));
        MapPic.setPreferredSize(new java.awt.Dimension(180, 180));

        javax.swing.GroupLayout PanelGI_MPLayout = new javax.swing.GroupLayout(PanelGI_MP);
        PanelGI_MP.setLayout(PanelGI_MPLayout);
        PanelGI_MPLayout.setHorizontalGroup(
                PanelGI_MPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(MapPic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PanelGI_MPLayout.setVerticalGroup(
                PanelGI_MPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(MapPic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        PanelGI_MI.setMaximumSize(new java.awt.Dimension(180, 32767));
        PanelGI_MI.setMinimumSize(new java.awt.Dimension(180, 100));
        PanelGI_MI.setOpaque(false);
        PanelGI_MI.setPreferredSize(new java.awt.Dimension(180, 185));

        Map_.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Map_.setLabelFor(MapT);
        Map_.setText("Map:");

        MapT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        MapT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        Gametype_.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Gametype_.setLabelFor(GametypeT);
        Gametype_.setText("Gametype:");

        GametypeT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        GametypeT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        Fraglimit_.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Fraglimit_.setLabelFor(FraglimitT);
        Fraglimit_.setText("Fraglimit:");

        FraglimitT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        FraglimitT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        Timelimit_.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Timelimit_.setLabelFor(TimelimitT);
        Timelimit_.setText("Timelimit:");

        TimelimitT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        TimelimitT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        Gamename_.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Gamename_.setLabelFor(GamenameT);
        Gamename_.setText("Gamename:");

        GamenameT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        GamenameT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout PanelGI_MILayout = new javax.swing.GroupLayout(PanelGI_MI);
        PanelGI_MI.setLayout(PanelGI_MILayout);
        PanelGI_MILayout.setHorizontalGroup(
                PanelGI_MILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator2)
                        .addComponent(jSeparator3)
                        .addComponent(jSeparator4)
                        .addGroup(PanelGI_MILayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(PanelGI_MILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(PanelGI_MILayout.createSequentialGroup()
                                                .addComponent(Map_)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(MapT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(PanelGI_MILayout.createSequentialGroup()
                                                .addComponent(Gametype_)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(GametypeT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(PanelGI_MILayout.createSequentialGroup()
                                                .addComponent(Fraglimit_)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(FraglimitT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(PanelGI_MILayout.createSequentialGroup()
                                                .addComponent(Timelimit_)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(TimelimitT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(PanelGI_MILayout.createSequentialGroup()
                                                .addComponent(Gamename_)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(GamenameT, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addComponent(jSeparator1)
        );
        PanelGI_MILayout.setVerticalGroup(
                PanelGI_MILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(PanelGI_MILayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(PanelGI_MILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Map_)
                                        .addComponent(MapT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PanelGI_MILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Gametype_)
                                        .addComponent(GametypeT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PanelGI_MILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Fraglimit_)
                                        .addComponent(FraglimitT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PanelGI_MILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Timelimit_)
                                        .addComponent(TimelimitT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PanelGI_MILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Gamename_)
                                        .addComponent(GamenameT))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout Panel_GILayout = new javax.swing.GroupLayout(Panel_GI);
        Panel_GI.setLayout(Panel_GILayout);
        Panel_GILayout.setHorizontalGroup(
                Panel_GILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Panel_GILayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(PanelGI_MP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PanelGI_MI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Panel_GILayout.setVerticalGroup(
                Panel_GILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Panel_GILayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(Panel_GILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(PanelGI_MI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(PanelGI_MP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        OptionsMenu.setText(Constants.OPTIONS);
        OptionsMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }

            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }

            public void menuSelected(javax.swing.event.MenuEvent evt) {
                OptionsMenuMenuSelected(evt);
            }
        });
        MainMenu.add(OptionsMenu);

        AboutMenu.setText(Constants.ABOUT);
        AboutMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }

            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }

            public void menuSelected(javax.swing.event.MenuEvent evt) {
                AboutMenuMenuSelected(evt);
            }
        });
        MainMenu.add(AboutMenu);

        setJMenuBar(MainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Panel_SI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Panel_PI, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                                        .addComponent(Panel_PLs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Panel_GI, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(Panel_SI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Panel_PI, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Panel_PLs, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Panel_GI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Thread td = new Thread(new Runnable() {
            @Override
            public void run() {
                while (KeepThread) {
                    // GetStatus
                    try {
                        // Reset the data packets
                        SendStatusPacket = new DatagramPacket(RequestStatus, RequestStatus.length,
                                InetAddress.getByName(TI.getServerIP()), TI.getServerPort());
                        ReceiveData = new byte[2048];
                        ReceiveDataPacket = new DatagramPacket(ReceiveData, ReceiveData.length);

                        Socket.send(SendStatusPacket);
                        Socket.receive(ReceiveDataPacket);
                        String data = new String(ReceiveDataPacket.getData());
                        String[] spl = data.split("\\\\");
                        // Do stuff with the data
                        for (int i = 0; i < spl.length; i++) {
                            switch (spl[i]) {
                                case "sv_hostname": {
                                    ServerN.setText(spl[i + 1].replaceAll("[^0-9a-zA-Z()\\[\\]{}]", ""));
                                    break;
                                }
                                case "sv_maxclients": {
                                    SI.setMaxclients(spl[i + 1].replaceAll("[^0-9]", ""));
                                    break;
                                }
                                case "fraglimit": {
                                    SI.setFraglimit(spl[i + 1].replaceAll("[^0-9]", ""));
                                    break;
                                }
                                case "timelimit": {
                                    SI.setTimelimit(spl[i + 1].replaceAll("[^0-9]", ""))/*.substring(0, spl[i + 1].length() - 1))*/;
                                    break;
                                }
                                case "g_gametype": {
                                    SI.setGametype(spl[i + 1]);
                                    break;
                                }
                                case "mapname": {
                                    SI.setMapname(spl[i + 1]);
                                    break;
                                }
                                case "gamename": {
                                    SI.setGamename(spl[i + 1]);
                                    break;
                                }
                            }
                        }
                        SI.ClearPlayers();
                        String[] players = spl[spl.length - 1].split("\\n");
                        players[0] = null;
                        players[players.length - 1] = null;
                        for (String pls : players) {
                            if (pls != null) {
                                if (pls.length() >= 3) {
                                    String score = pls.substring(0, pls.indexOf(' ')).trim();
                                    pls = pls.substring((score + " ").length()).trim();
                                    String ping = pls.substring(0, pls.indexOf(" ")).trim();
                                    pls = pls.substring((ping + " ").length()).trim();
                                    String name = pls.substring(pls.indexOf("\"") + 1, pls.length() - 1).trim();
                                    //if (ping.equals("0")) {
                                    //    // Bot
                                    SI.AddPlayer(name, score, ping);
                                    //} else {
                                    //    SI.AddPlayer(name, score, ping);
                                    //}
                                }
                            }
                        }
                        SI.SortPlayers();

                        new Thread(() -> {
                            synchronized (LockTI) {
                                RefreshFrame();
                                if (TI.isAllowNotifications() && SystemTray.isSupported()) {
                                    int plrs = SI.GetNumRealPlayers();
                                    if (plrs > (TI.isBodyParkedOnServerMode() ? 1 : 0)) {
                                        if (TI.isAdvancedNotificationMode()) {
                                            if (NumPlayers != plrs) {
                                                NumPlayers = plrs;
                                                Bother = true;
                                            }
                                        } else {
                                            if (cont >= ((TI.getMinutes() * 60000) / TI.getRefreshTime())) {
                                                Bother = true;
                                            }
                                        }
                                        if (Bother) {
                                            Bother = false;
                                            String msg;
                                            if (plrs == 1) {
                                                msg = "There is 1 player playing JKA.";
                                            } else {
                                                msg = "There are " + plrs + " players playing JKA.";
                                            }
                                            if (TI.isAllowMultipleNotifications()) {
                                                msg += "\r\n\r\nMessage ID: " + new Random().nextInt(Integer.MAX_VALUE) + " (Ignore this).";
                                            }
                                            Tray.displayMessage(Constants.APP_NAME_VERSION, msg, TrayIcon.MessageType.NONE);
                                            cont = 0;
                                        }
                                    } else {
                                        Bother = true;
                                        NumPlayers = 0;
                                        cont = 0;
                                    }
                                }
                            }
                        }).start();
                        synchronized (LockTI) {
                            if (TI.isLogPlayers()) {
                                new Thread(() -> {
                                    synchronized (LockLog) {
                                        ReadWritePlayerLog();
                                    }
                                }).start();
                            }
                        }
                        try {
                            int RefTime;
                            synchronized (LockTI) {
                                RefTime = TI.getRefreshTime();
                            }
                            synchronized (TI) {
                                TI.wait(RefTime);
                            }
                            cont++;
                        } catch (InterruptedException ignored) {
                        }
                    } catch (IOException ignored) {
                    }
                }
            }
        });
        td.setName("Server Info");
        td.start();

        Thread RefreshTITD = new Thread(() -> {
            while (true) {
                try {
                    Thread.sleep(1000 * 60 * 60 * 4);
                    Main.CheckIfThereIsUpdate();
                    synchronized (LockTI) {
                        TI.RefreshTI();
                    }
                } catch (Exception ex) {
                    Logger.getLogger(TrackerForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        RefreshTITD.setDaemon(true);
        RefreshTITD.setName("Refresh TI");
        RefreshTITD.start();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        KeepThread = false;
        TI.TrySaveInfo();
    }//GEN-LAST:event_formWindowClosing

    private void AboutMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_CreditsMenuMenuSelected
        // TODO add your handling code here:
        AboutForm af = new AboutForm(this);
        af.setLocationRelativeTo(null);
        af.setVisible(true);
    }//GEN-LAST:event_CreditsMenuMenuSelected

    private void OptionsMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_OptionsMenuMenuSelected
        // TODO add your handling code here:
        synchronized (LockTI) {
            OptionsForm of = new OptionsForm(this, TI);
            of.setLocationRelativeTo(null);
            of.setVisible(true);
        }
    }//GEN-LAST:event_OptionsMenuMenuSelected

    public final void Init() throws UnknownHostException, SocketException {
        Socket = new DatagramSocket();
        Socket.setSoTimeout(1000);
        RequestStatus = new byte[]{(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x67, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73};
    }

    public void RefreshFrame() {
        MarqueeMessage.setText(TI.getTrackerMessage());
        IP_PortT.setText(TI.getServerIP() + ":" + TI.getServerPort());
        PlayersT.setText(SI.GetNumRealPlayers() + "(" + SI.GetNumBots() + ")/" + SI.getMaxclients());
        BotsT.setText("" + SI.GetNumBots());
        TotalT.setText("" + SI.GetNumPlayers());
        StringBuilder sbPN = new StringBuilder();
        StringBuilder sbPS = new StringBuilder();
        StringBuilder sbPP = new StringBuilder();
        sbPN.append(Constants.PLAYER_INFO_HTML_1);
        sbPS.append(Constants.PLAYER_INFO_HTML_1);
        sbPP.append(Constants.PLAYER_INFO_HTML_1);
        int j = 0;
        for (int i = 0; i < (j = SI.getPlayersSize()); i++) {
            Player p = SI.getPlayer(i);
            sbPN.append("<span class=\"_01\">[").append(i + 1).append("] - </span>");
            sbPN.append(p.getFormattedName());
            sbPS.append(p.getFormattedScore());
            sbPP.append(p.getFormattedPing());
            if (i != j - 1) {
                sbPN.append("<br />");
                sbPS.append("<br />");
                sbPP.append("<br />");
            }
        }
        sbPN.append(Constants.PLAYER_INFO_HTML_2);
        sbPS.append(Constants.PLAYER_INFO_HTML_2);
        sbPP.append(Constants.PLAYER_INFO_HTML_2);
        PlayerI.setText(sbPN.toString());
        PlayerSc.setText(sbPS.toString());
        PlayerPi.setText(sbPP.toString());
        MapT.setText(SI.getMapname());
        try {
            ImageIcon icon = new ImageIcon();
            Image image = Toolkit.getDefaultToolkit()
                    .getImage(TrackerForm.class.getClassLoader().getResource(SI.getMapnamePic()));
            icon.setImage(image.getScaledInstance(180, 180, Image.SCALE_DEFAULT));
            MapPic.setIcon(icon);
        } catch (Exception ignored) {
            ImageIcon icon = new ImageIcon();
            icon.setImage(Toolkit.getDefaultToolkit()
                    .getImage(TrackerForm.class.getClassLoader().getResource("ejo.gif")));
            MapPic.setIcon(icon);
        }
        GametypeT.setText(SI.getGametypeStr());
        FraglimitT.setText(SI.getFraglimit());
        TimelimitT.setText(SI.getTimelimit());
        GamenameT.setText(SI.getGamename());
        CountryT.setText(SI.getCountryAndRegion());
        try {
            ImageIcon icon = new ImageIcon();
            icon.setImage(ImageIO.read(new URL(SI.getFlagUrl())));
            FlagPic.setIcon(icon);
        } catch (IOException ignored) {
            ImageIcon icon = new ImageIcon();
            icon.setImage(Toolkit.getDefaultToolkit().getImage(TrackerForm.class.getClassLoader().getResource("ejo.gif")));
            FlagPic.setIcon(icon);
        }
    }

    private void ReadWritePlayerLog() {
        // Do log writting/reading
        // File name: PlayerLog_yyyyMMdd.log
        // If file exists, append
        // File template:
        /*
        [
            {
                "Timestamp": 0 ,
                "NumPlayers": 0 ,
                "NumRealPlayers": 0 ,
                "NumBots": 0 ,
                "Players": [
                    {
                        "Name":"...",
                        "Score": 0 ,
                        "Ping": 0 ,
                        "IsBot": false
                    }, {} ]
            }, {}
        ]
         */
        File dir = new File("config");
        File LogDir = new File("config/Logs");
        File LogFile = new File("config/Logs/PlayerLog_" + LocalDate.now().format(DateTimeFormatter.ofPattern("yyyyMMdd")) + ".json");

        if (!dir.exists() || !dir.isDirectory()) {
            dir.mkdir();
        }
        if (!LogDir.exists() || !LogDir.isDirectory()) {
            LogDir.mkdir();
        }

        JSONArray ja = new JSONArray();
        if (LogFile.exists() && LogFile.isFile()) {
            try {
                // Read from file
                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(LogFile), "UTF-8"));
                StringBuilder sb = new StringBuilder();
                String line;
                while ((line = br.readLine()) != null) {
                    sb.append(line);
                }
                ja = new JSONArray(sb.toString());
            } catch (IOException | JSONException ignored) {
            }
        }
        // Write to file
        JSONObject root = new JSONObject();
        root.put("Timestamp", Instant.now().getEpochSecond());
        root.put("NumPlayers", SI.GetNumPlayers());
        root.put("NumRealPlayers", SI.GetNumRealPlayers());
        root.put("NumBots", SI.GetNumBots());
        JSONArray players = new JSONArray();
        for (int i = 0; i < SI.getPlayersSize(); i++) {
            JSONObject player = new JSONObject();
            Player p = SI.getPlayer(i);
            player.put("Name", p.getName());
            player.put("Score", Integer.parseInt(p.getScore()));
            player.put("Ping", Integer.parseInt(p.getPing()));
            player.put("IsBot", p.isBot());
            players.put(player);
        }
        root.put("Players", players);
        ja.put(root);

        try {
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(LogFile), "UTF-8"));
            bw.write(ja.toString(2));
            bw.close();
        } catch (IOException | JSONException ignored) {
        }
    }

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(TrackerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(TrackerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(TrackerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(TrackerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new TrackerForm().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BotsT;
    private javax.swing.JLabel Bots_;
    private javax.swing.JLabel CountryT;
    private javax.swing.JMenu AboutMenu;
    private javax.swing.JLabel FlagPic;
    private javax.swing.JLabel FraglimitT;
    private javax.swing.JLabel Fraglimit_;
    private javax.swing.JLabel GamenameT;
    private javax.swing.JLabel Gamename_;
    private javax.swing.JLabel GametypeT;
    private javax.swing.JLabel Gametype_;
    private javax.swing.JLabel IP_PortT;
    private javax.swing.JMenuBar MainMenu;
    private javax.swing.JLabel MapPic;
    private javax.swing.JLabel MapT;
    private javax.swing.JLabel Map_;
    private javax.swing.JMenu OptionsMenu;
    private javax.swing.JPanel PanelFlag;
    private javax.swing.JPanel PanelGI_MI;
    private javax.swing.JPanel PanelGI_MP;
    private javax.swing.JPanel Panel_GI;
    private javax.swing.JPanel Panel_PI;
    private javax.swing.JScrollPane Panel_PLs;
    private javax.swing.JPanel Panel_PLsInterior;
    private javax.swing.JPanel Panel_SI;
    private javax.swing.JLabel PlayerI;
    private javax.swing.JLabel PlayerPi;
    private javax.swing.JLabel PlayerSc;
    private javax.swing.JLabel PlayersT;
    private javax.swing.JLabel Players_;
    private javax.swing.JLabel ServerN;
    private javax.swing.JLabel Server_;
    private javax.swing.JLabel TimelimitT;
    private javax.swing.JLabel Timelimit_;
    private javax.swing.JLabel TotalT;
    private javax.swing.JLabel Total_;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private mJPanel mJPanel1;
    private MarqueePanel marqueePanel1;
    // End of variables declaration//GEN-END:variables
}
